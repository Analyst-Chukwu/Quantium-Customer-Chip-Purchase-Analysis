SELECT*
FROM [Forager].[dbo].[Trans]

---CHECKING FOR NULL VALUES
SELECT SUM(CASE WHEN DATE IS NULL THEN 1 ELSE 0 END) AS Date,
       SUM(CASE WHEN [STORE_NBR] IS NULL THEN 1 ELSE 0 END) AS [STORE_NBR],
	   SUM(CASE WHEN [LYLTY_CARD_NBR] IS NULL THEN 1 ELSE 0 END) [LYLTY_CARD_NBR],
	   SUM(CASE WHEN [TXN_ID] IS NULL THEN 1 ELSE 0 END) AS [TXN_ID],
	   SUM(CASE WHEN [PROD_NBR] IS NULL THEN 1 ELSE 0 END) AS [PROD_NBR],
	   SUM(CASE WHEN [PROD_NAME] IS NULL THEN 1 ELSE 0 END) AS [PROD_NAME],
	   SUM(CASE WHEN [PROD_QTY] IS NULL THEN 1 ELSE 0 END) AS [PROD_QTY],
	   SUM(CASE WHEN [TOT_SALES] IS NULL THEN 1 ELSE 0 END) AS [TOT_SALES]
FROM [Forager].[dbo].[Trans]

---JOINING THE TWO TABLES
SELECT*
FROM Trans
JOIN QVI_pur_behaviour
ON Trans.LYLTY_CARD_NBR = QVI_pur_behaviour.LYLTY_CARD_NBR

--PUTTING THE NEW JOIN IN A TABLE
SELECT*
INTO QVI
FROM (SELECT T.[DATE], T.[STORE_NBR], T.[LYLTY_CARD_NBR], T.[TXN_ID], T.[PROD_NBR], T.[PROD_NAME], 
      T.[PROD_QTY], T.[TOT_SALES], Q.[LIFESTAGE], Q.[PREMIUM_CUSTOMER]
FROM Trans AS T
JOIN QVI_pur_behaviour AS Q
ON T.LYLTY_CARD_NBR = Q.LYLTY_CARD_NBR
) A

SELECT*
FROM QVI
--ADDING NEW COLUMNS 
ALTER TABLE QVI
ADD MONTH int,
    YEAR int,
	MONTH_NAME VARCHAR(50)

-- populating the new columns
SELECT MONTH(DATE)
FROM QVI

UPDATE QVI
SET MONTH = MONTH(DATE)
FROM QVI

SELECT YEAR(DATE)
FROM QVI

UPDATE QVI
SET YEAR = YEAR(DATE)
FROM QVI

UPDATE QVI
SET MONTH_NAME =  CASE WHEN MONTH = 1 THEN 'Jan'
            WHEN MONTH = 2 THEN 'Feb'
			WHEN MONTH = 3 THEN 'March'
			WHEN MONTH = 4 THEN 'April'
			WHEN MONTH = 5 THEN 'May'
			WHEN MONTH = 6 THEN 'June'
			WHEN MONTH = 7 THEN 'July'
			WHEN MONTH = 8 THEN 'Aug'
			WHEN MONTH = 9 THEN 'Sept'
			WHEN MONTH = 10 THEN 'Oct'
			WHEN MONTH = 11 THEN 'Nov'
			WHEN MONTH = 12 THEN 'Dec'
END
FROM QVI
----------EDA----------------------
---CREATING VIEWS FOR VISUALIZATION (VIEWS WERE CREATED AT THE END OF EDA)
SELECT*
FROM QVI


--COUNT OF CUSTOMERS
CREATE VIEW CUSTOMERS AS 
SELECT COUNT(DISTINCT [LYLTY_CARD_NBR]) AS CUSTOMERS
FROM QVI

--COUNT OF STORES
CREATE VIEW STORES AS 
SELECT COUNT(DISTINCT [STORE_NBR]) AS STORES
FROM QVI

--COUNT OF PRODUCTS SOLD
CREATE VIEW PRODUCTS AS 
SELECT COUNT ([PROD_NBR]) AS PRODUCTS
FROM QVI

--SUM OF TOTAL SALES
CREATE VIEW SALES AS 
SELECT ROUND(SUM([TOT_SALES]), 2) AS SALES
FROM QVI

--DISTRIBUTION OF CUSTOMERS BY LIFESTAGE
CREATE VIEW CUSTOMERS_BY_LIFESTAGE AS 
SELECT LIFESTAGE, ROUND(SUM(TOT_SALES),2) AS Revenue, 
              ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Revenue
FROM QVI
GROUP BY LIFESTAGE
--ORDER BY SUM(TOT_SALES) DESC

--DISTRIBUTION OF CUSTOMERS BY [PREMIUM_CUSTOMER]
CREATE VIEW CUSTOMERS_BY_SERVICE AS 
SELECT [PREMIUM_CUSTOMER], ROUND(SUM(TOT_SALES),2) AS Revenue, 
              ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Revenue
FROM QVI
GROUP BY [PREMIUM_CUSTOMER]
--ORDER BY SUM(TOT_SALES) DESC

--CONTRIBUTION OF SALES BY CUSTOMERS BY LIFESTAGE
CREATE VIEW SALES_BY_CUSTOMERS_BY_LIFESTAGE AS 
SELECT PREMIUM_CUSTOMER, LIFESTAGE, ROUND(SUM(TOT_SALES),2) AS Revenue, 
              ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Revenue 
FROM QVI
GROUP BY [PREMIUM_CUSTOMER], LIFESTAGE
ORDER BY PREMIUM_CUSTOMER DESC, PER_Revenue DESC

--COUNT OF LIFESTAGE CUSTOMERS IN EACH SERVICE-TYPE CATEGORY
CREATE VIEW COUNT_LIFESTAGE_CUST_IN_EACH_SERVICE_TYPE AS
SELECT PREMIUM_CUSTOMER, LIFESTAGE, COUNT(LIFESTAGE) AS No_Lifestage
FROM QVI
GROUP BY PREMIUM_CUSTOMER, LIFESTAGE
ORDER BY PREMIUM_CUSTOMER DESC, No_Lifestage DESC

--Sales by Store
CREATE VIEW SALES_BY_STORE AS
SELECT STORE_NBR, ROUND(SUM(TOT_SALES), 2) as Revenue, 
		ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Revenue 
FROM QVI
GROUP BY STORE_NBR
--ORDER BY SUM(TOT_SALES) DESc

----SALES BY PRODUCTS
CREATE VIEW SALES_BY_PRODUCT AS
SELECT PROD_NAME, round(SUM(TOT_SALES),2) AS Total_Sales, 
		ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Revenue 
FROM QVI
GROUP BY PROD_NAME
--ORDER BY SUM(TOT_SALES) DESc

--SALES BY MONTH
CREATE VIEW SALES_BY_MONTH AS
SELECT MONTH, MONTH_NAME, YEAR, round(SUM(TOT_SALES),2) AS Total_Sales, 
		ROUND(SUM(TOT_SALES)*100/(SELECT (SUM(TOT_SALES)) FROM QVI),2) AS PER_Sales 
FROM QVI
GROUP BY MONTH, MONTH_NAME, YEAR
--ORDER BY SUM(TOT_SALES) DESc



